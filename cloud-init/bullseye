#cloud-config

# persistent ssd for /home/bullseye
bootcmd:
- mkfs.ext4 -m 0 -F -E lazy_itable_init=0,lazy_journal_init=0,discard /dev/sdb
- mkdir -p /home/bullseye
- mount -o discard,defaults /dev/sdb /home/bullseye

# bootstrap
runcmd:
# copy services and scripts
- mkdir -m 700 -p /var/bullseye
- docker run --rm -v /var/bullseye:/tmp -w /tmp gcr.io/cloud-builders/gsutil -m cp -r gs://cloud-lab/bullseye/services .
- cp /var/bullseye/services/*.service /etc/systemd/system/

# install gvisor
- systemctl stop docker
- mkdir -m 755 -p /var/lib/runsc
- wget -O /var/lib/docker/runsc https://storage.googleapis.com/gvisor/releases/nightly/latest/runsc
- wget -O /var/lib/docker/runsc.sha512 https://storage.googleapis.com/gvisor/releases/nightly/latest/runsc.sha512
- pushd /var/lib/docker && sha512sum -c runsc.sha512 && popd
- chmod a+x /var/lib/docker/runsc
- cp /var/bullseye/services/docker/daemon.json /etc/docker/daemon.json
- systemctl start docker

# copy ejson keys
- docker run --rm -v /var/bullseye:/tmp -w /tmp gcr.io/cloud-builders/gsutil cp -r gs://cloud-lab/bullseye/ejson .

# decrypt ejson secrets for containers
# TODO dont do this here
- HOME=/var/bullseye docker-credential-gcr configure-docker
- HOME=/var/bullseye docker run --rm -v /var/bullseye/ejson/keys:/opt/ejson/keys:ro -v /var/bullseye/services:/tmp:ro -w /tmp gcr.io/trusted-builds/ejson2env -q datadog.ejson > /var/bullseye/services/datadog.env
- HOME=/var/bullseye docker run --rm -v /var/bullseye/ejson/keys:/opt/ejson/keys:ro -v /var/bullseye/services:/tmp:ro -w /tmp gcr.io/trusted-builds/ejson2env -q mysql.ejson > /var/bullseye/services/mysql.env
- HOME=/var/bullseye docker run --rm -v /var/bullseye/ejson/keys:/opt/ejson/keys:ro -v /var/bullseye/services:/tmp:ro -w /tmp gcr.io/trusted-builds/ejson2env -q wishlist.ejson > /var/bullseye/services/wishlist.env

# create docker networks
- docker network create -d bridge --subnet=10.0.0.0/24 --ip-range=10.0.0.0/28 bullseye

# enable services
- systemctl daemon-reload
- systemctl enable datadog.service
- systemctl enable bullseye.service
- systemctl enable asterisk.service
- systemctl enable nginx.service
- systemctl enable mysql.service
- systemctl enable wishlist.service
- systemctl start datadog.service
- systemctl start bullseye.service
- systemctl start asterisk.service
- systemctl start nginx.service
- systemctl start mysql.service
- systemctl start wishlist.service

# reboot when complete
#power_state:
# delay: now
# mode: reboot
# message: Bootstrap complete!
